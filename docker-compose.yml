services:

  # MATS broker microservice
  nats-server:
    container_name: nats-server
    image: nats:alpine3.20
    ports:
      - "8222:8222" # Clients management (Public port)
      # - "4222:4222" # Client port (Not necessary for current Network)
      # - "6222:6222" # Routing port for clustering (Not necessary for current Network)

  # Client gateway microservice
  client-gateway:
    container_name: client-gateway
    build:
      context: ./client-gateway
      dockerfile: Dockerfile
    ports:
      - ${CLIENT_GATEWAY_PORT}:3000 # Local:Container
    volumes:
      - ./client-gateway/src:/usr/src/app/src # Binding container to Node JS filesystem
    command: yarn run start:dev
    environment:
      - PORT=3000
      - NATS_SERVERS=nats://nats-server:4222 # Docker nats-server DNS
    depends_on:
      - nats-server

  # Products microservice
  products-ms:
    container_name: products-ms
    build:
      context: ./products-ms
      dockerfile: Dockerfile
    volumes:
      - ./products-ms/src:/usr/src/app/src # Binding container to Node JS filesystem
    command: yarn run start:docker
    environment:
      - PORT=3001
      - NATS_SERVERS=nats://nats-server:4222 # Docker nats-server DNS
      - DATABASE_URL=file:./dev.db # SQLite temporal database
    depends_on:
      - nats-server

  # Orders microservice
  orders-ms:
    container_name: orders-ms
    build:
      context: ./orders-ms
      dockerfile: Dockerfile
    volumes:
      - ./orders-ms/src:/usr/src/app/src # Binding container to Node JS filesystem
    command: yarn run docker:initialize
    environment:
      - PORT=3002
      - NATS_SERVERS=nats://nats-server:4222 # Docker nats-server DNS
      - DATABASE_URL=postgresql://postgres:123456@orders-db:5432/ordersms?schema=public
    depends_on:
      - orders-db
      - nats-server

  # Payments microservice
  payments-ms:
    container_name: payments-ms
    build:
      context: ./payments-ms
      dockerfile: Dockerfile
    volumes:
      - ./payments-ms/src:/usr/src/app/src # Binding container to Node JS filesystem
    command: yarn run start:dev
    environment:
      - NATS_SERVERS=nats://nats-server:4222 # Docker nats-server DNS
      - PORT=${PAYMENTS_MS_PORT}
      - STRIPE_SECRET=${STRIPE_SECRET}
      - STRIPE_SUCCESS_URL=${STRIPE_SUCCESS_URL}
      - STRIPE_CANCEL_URL=${STRIPE_CANCEL_URL}
      - STRIPE_ENDPOINT_SECRET=${STRIPE_ENDPOINT_SECRET}
    ports:
      - ${PAYMENTS_MS_PORT}:${PAYMENTS_MS_PORT}
    depends_on:
      - nats-server

  # Auth microservice
  auth-ms:
    container_name: auth-ms
    build:
      context: ./auth-ms
      dockerfile: Dockerfile
    volumes:
      - ./auth-ms/src:/usr/src/app/src # Binding container to Node JS filesystem
    command: yarn run start:docker
    environment:
      - NATS_SERVERS=nats://nats-server:4222 # Docker nats-server DNS
      - PORT=3004
      - DATABASE_URL=mongodb://auth-db:27017/mongodb?replicaSet=rs0&authSource=admin&directConnection=true
#      - DATABASE_URL=mongodb://mongodb:123456@auth-db:27017/mongodb?authSource=admin&directConnection=true
      - JWT_SECRET=${AUTH_JWT_SECRET}
    depends_on:
      - nats-server
      - auth-db

  # Single MongoDB ReplicaSet
  # https://medium.com/@JosephOjo/mongodb-replica-set-with-docker-compose-5ab95c02af0d
  auth-db:
    container_name: auth_database
    image: mongo:7.0
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    ports:
      - "27017:27017"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      retries: 30
    volumes:
      - auth-db_data:/data/db
      - auth-db_config:/data/configdb

  # Extends orders db from other docker-compose config file
  # orders-db:
  #   extends:
  #     file: ./orders-ms/docker-compose.yml
  #     service: orders-db

  # Local postgres orders Postgres database
  orders-db:
    container_name: orders_database
    image: postgres:15-alpine
    volumes:
      - ./orders-ms/postgres:/var/lib/postgresql/data
    ports: # Private network DB
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456
      - POSTGRES_DB=ordersms

volumes:
  auth-db_data:
  auth-db_config: